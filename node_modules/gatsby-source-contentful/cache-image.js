"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const crypto = require(`crypto`);

const _require = require(`path`),
      resolve = _require.resolve,
      parse = _require.parse;

const axios = require(`axios`);

const _require2 = require(`fs-extra`),
      pathExists = _require2.pathExists,
      createWriteStream = _require2.createWriteStream;

module.exports =
/*#__PURE__*/
function () {
  var _cacheImage = (0, _asyncToGenerator2.default)(function* (store, image, options) {
    const program = store.getState().program;
    const CACHE_DIR = resolve(`${program.directory}/.cache/contentful/assets/`);
    const _image$file = image.file,
          url = _image$file.url,
          fileName = _image$file.fileName,
          details = _image$file.details;
    const width = options.width,
          height = options.height,
          maxWidth = options.maxWidth,
          maxHeight = options.maxHeight,
          resizingBehavior = options.resizingBehavior,
          cropFocus = options.cropFocus,
          background = options.background;
    const userWidth = maxWidth || width;
    const userHeight = maxHeight || height;
    const aspectRatio = details.image.height / details.image.width;
    const resultingWidth = Math.round(userWidth || 800);
    const resultingHeight = Math.round(userHeight || resultingWidth * aspectRatio);
    const params = [`w=${resultingWidth}`, `h=${resultingHeight}`];

    if (resizingBehavior) {
      params.push(`fit=${resizingBehavior}`);
    }

    if (cropFocus) {
      params.push(`crop=${cropFocus}`);
    }

    if (background) {
      params.push(`bg=${background}`);
    }

    const optionsHash = crypto.createHash(`md5`).update(JSON.stringify([url, ...params])).digest(`hex`);

    const _parse = parse(fileName),
          name = _parse.name,
          ext = _parse.ext;

    const absolutePath = resolve(CACHE_DIR, `${name}-${optionsHash}${ext}`);
    const alreadyExists = yield pathExists(absolutePath);

    if (!alreadyExists) {
      const previewUrl = `http:${url}?${params.join(`&`)}`;
      const response = yield axios({
        method: `get`,
        url: previewUrl,
        responseType: `stream`
      });
      yield new Promise((resolve, reject) => {
        const file = createWriteStream(absolutePath);
        response.data.pipe(file);
        file.on(`finish`, resolve);
        file.on(`error`, reject);
      });
    }

    return absolutePath;
  });

  return function cacheImage(_x, _x2, _x3) {
    return _cacheImage.apply(this, arguments);
  };
}();